import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "io.freefair.lombok" version "6.2.0"
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    
    testImplementation "org.assertj:assertj-core:3.21.0"   
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation "org.mockito:mockito-junit-jupiter:3+"

    
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
}

application {
    // Define the main class for the application.
    mainClass = 'org.devring.workshop.App'
}


tasks.withType(Test) {
// source: https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
    testLogging {
//         // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        // showExceptions true
        // showCauses true
        // showStackTraces true

//         // set options for log level DEBUG and INFO
//         debug {
//             events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//             exceptionFormat TestExceptionFormat.FULL
//         }
//         info.events = debug.events
//         info.exceptionFormat = debug.exceptionFormat

//         afterSuite { desc, result ->
//             if (!desc.parent) { // will match the outermost suite
//                 def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
//                 def startItem = '|  ', endItem = '  |'
//                 def repeatLength = startItem.length() + output.length() + endItem.length()
//                 println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
//             }
//         }

    // enable to be able to specify properties from commandline, clashes with jacoco :(
    // systemProperties = System.properties

    useJUnitPlatform()
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
        // html.destination file("${buildDir}/jacocoHtml")
    }
}

task fastTest(type: Test)  {
    useJUnitPlatform {
        includeTags "fast"
    }

}
